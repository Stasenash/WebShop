version: '3.9'

services:

  rabbitmq:
    image: rabbitmq:management
    container_name: 'rabbitmq'
    environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
    ports:
      - "5672:5672"
      - "15672:15672"

#--------------------------------ADMIN--------------------------------------
  admin_db:
    image: postgres:13.3
    restart: always
    container_name: 'admin_postgres'
    environment:
      POSTGRES_DB: admin
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
    ports:
      - 5432:5432

  admin_app:
    restart: on-failure
    container_name: 'admin_application'
#    env_file:
#      - ./servers.env
    build:
      context: .
      dockerfile: ./WebShopAdminApplication/Dockerfile
    ports:
      - 8080
    links:
      - admin_api

  admin_api:
    container_name: 'admin_api'
    restart: on-failure
#    env_file:
#      - ./servers.env
    build:
      context: .
      dockerfile: ./WebShopAdminAPI/Dockerfile
    ports:
      - 80
    links:
      - admin_db
#--------------------------------CATALOG--------------------------------------

#  catalog_db:
#    image: mongo
#    restart: always
#    container_name: 'catalog_mongo'
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: root
#      MONGO_INITDB_ROOT_PASSWORD: root
#    ports:
#      - 27017:27017

#  catalog_app:
#    restart: on-failure
#    container_name: 'catalog_application'
##    env_file:
##      - ./servers.env
#    build:
#      context: .
#      dockerfile: ./WebShopCatalogApplication/Dockerfile
#    ports:
#      - 8082
#    links:
#      - catalog_db

#  catalog_api:
#    container_name: 'catalog_api'
#    restart: on-failure
##    env_file:
##      - ./servers.env
#    build:
#      context: .
#      dockerfile: ./WebShopCatalogAPI/Dockerfile
#    ports:
#      - 8083
#    links:
#      - catalog_db

#  catalog_consumer:
#    container_name: 'catalog_consumer'
#    restart: on-failure
#    build:
#      context: .
#      dockerfile: ./WebShopCatalogConsumer/Dockerfile
#    links:
#      - catalog_app
#      - rabbitmq
#    depends_on:
#      - rabbitmq
#    command: sh -c './wait-for rabbitmq:5672 -- cmd'
#    ports:
#      - "8084:8084"
#    expose:
#      - "8084"
##--------------------------------USER--------------------------------------

#  user_db:
#    image: postgres:13.3
#    restart: always
#    container_name: 'user_postgres'
#    environment:
#      POSTGRES_DB: user
#      POSTGRES_USER: root
#      POSTGRES_PASSWORD: root
#    ports:
#      - 5433:5433

##--------------------------------CART--------------------------------------
#  cart_db:
#    image: mongo
#    restart: always
#    container_name: 'cart_mongo'
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: root
#      MONGO_INITDB_ROOT_PASSWORD: root
#    ports:
#      - 27018:27018

#  cart_app:
#    restart: on-failure
#    container_name: 'cart_application'
##    env_file:
##      - ./servers.env
#    build:
#      context: .
#      dockerfile: ./WebShopCartApplication/Dockerfile
#    ports:
#      - 8085
#    links:
#      - cart_db

#  cart_api:
#    container_name: 'cart_api'
#    restart: on-failure
##    env_file:
##      - ./servers.env
#    build:
#      context: .
#      dockerfile: ./WebShopCartAPI/Dockerfile
#    ports:
#      - 8086
#    links:
#      - cart_db

#  cart_consumer:
#    container_name: 'cart_consumer'
#    restart: on-failure
#    build:
#      context: .
#      dockerfile: ./WebShopCartConsumer/Dockerfile
#    links:
#      - cart_app
#      - rabbitmq
#    depends_on:
#      - rabbitmq
#    command: sh -c './wait-for rabbitmq:5672 -- cmd'
#    ports:
#      - "8087:8087"
#    expose:
#      - "8087"
##--------------------------------ORDER--------------------------------------
#  order_db:
#    image: postgres:13.3
#    restart: always
#    container_name: 'order_postgres'
#    environment:
#      POSTGRES_DB: order
#      POSTGRES_USER: root
#      POSTGRES_PASSWORD: root
#    ports:
#      - 5435:5435

#  order_app:
#    restart: on-failure
#    container_name: 'order_application'
##    env_file:
##      - ./servers.env
#    build:
#      context: .
#      dockerfile: ./WebShopOrderApplication/Dockerfile
#    ports:
#      - 8088
#    links:
#      - order_db

#  order_api:
#    container_name: 'order_api'
#    restart: on-failure
##    env_file:
##      - ./servers.env
#    build:
#      context: .
#      dockerfile: ./WebShopOrderAPI/Dockerfile
#    ports:
#      - 8089
#    links:
#      - order_db

#  order_consumer:
#    container_name: 'order_consumer'
#    restart: on-failure
#    build:
#      context: .
#      dockerfile: ./WebShopOrderConsumer/Dockerfile
#    links:
#      - order_app
#      - rabbitmq
#    depends_on:
#      - rabbitmq
#    command: sh -c './wait-for rabbitmq:5672 -- cmd'
#    ports:
#      - "8090:8090"
#    expose:
#      - "8090"