version: '3.4'

services:

  rabbitmq:
    image: rabbitmq:management
    container_name: 'rabbitmq'
    environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
    ports:
      - "5672:5672"
      - "15672:15672"

#--------------------------------ADMIN--------------------------------------
  admin_db:
    image: postgres:13.3
    restart: always
    container_name: 'admin_db'
    environment:
      POSTGRES_DB: admin
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
    ports:
      - 5432:5432
    volumes:
      - ./admin_db_backup:/var/lib/postgresql/data

  webshopadminapi:
    restart: on-failure
    container_name: 'admin_api'
    image: ${DOCKER_REGISTRY-}webshopadminapi
    environment:
      RABBITMQ_HOST: "rabbitmq:5672"
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: "guest"
      RABBITMQ_PASS: "guest"
    build:
      context: .
      dockerfile: WebShopAdminAPI/Dockerfile
    ports:
      - 8080:443
    links:
      - admin_db
      - rabbitmq

  webshopadminapplication:
    restart: on-failure
    container_name: 'admin_application'
    image: ${DOCKER_REGISTRY-}webshopadminapplication
    build:
      context: .
      dockerfile: WebShopAdminApplication/Dockerfile
    ports:
      - 8081:443
    links:
      - admin_api

#--------------------------------CATALOG--------------------------------------
  catalog_db:
    container_name: 'catalog_db'
    image: mongo
    restart: always
    ports:
        - 27017:27017
    environment:
        MONGO_INITDB_ROOT_USERNAME: root
        MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
        - ./catalog_db_backup:/data/db

  webshopcatalogconsumer:
    container_name: 'catalog_consumer'
    environment:
      RABBITMQ_HOST: "rabbitmq:5672"
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: "guest"
      RABBITMQ_PASS: "guest"
    image: ${DOCKER_REGISTRY-}webshopcatalogconsumer
    build:
      context: .
      dockerfile: WebShopCatalogConsumer/Dockerfile
    links:
     - catalog_db
     - rabbitmq

