version: '3.4'

# localhost:5432  - admin_db   (postgres)
# localhost:27017 - catalog_db (mongo)
# localhost:5433  - user_db    (postgres)

# localhost:8080 - admin_api
# localhost:8081 - admin_application
# localhost:8082 - catalog_api
# localhost:8083 - catalog_application
# localhost:8084 - admin_gateway
# localhost:8085 - catalog_gateway

services:

  rabbitmq:
    image: rabbitmq:management
    container_name: 'rabbitmq'
    environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
    ports:
      - "5672:5672"
      - "15672:15672"

#--------------------------------ADMIN--------------------------------------
  admin_db:
    image: postgres:13.3
    restart: always
    container_name: 'admin_db'
    environment:
      POSTGRES_DB: admin
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
    ports:
      - 5432:5432
    volumes:
      - ./admin_db_backup:/var/lib/postgresql/data

  webshopadminapi:
    restart: on-failure
    container_name: 'admin_api'
    image: ${DOCKER_REGISTRY-}webshopadminapi
    environment:
      RABBITMQ_HOST: "rabbitmq"
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: "guest"
      RABBITMQ_PASS: "guest"
    build:
      context: .
      dockerfile: WebShopAdminAPI/Dockerfile
    ports:
      - 8080:80
    links:
      - admin_db
      - rabbitmq

  webshopadminapplication:
    restart: on-failure
    container_name: 'admin_application'
    image: ${DOCKER_REGISTRY-}webshopadminapplication
    build:
      context: .
      dockerfile: WebShopAdminApplication/Dockerfile
    ports:
      - 8081:80
    links:
      - webshopadminapi
      - webshopadmingateway

#--------------------------------CATALOG--------------------------------------
  catalog_db:
    container_name: 'catalog_db'
    image: mongo
    restart: always
    ports:
        - 27017:27017
    environment:
        MONGO_INITDB_ROOT_USERNAME: root
        MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
        - ./catalog_db_backup:/data/db

  webshopcatalogconsumer:
    restart: on-failure
    container_name: 'catalog_consumer'
    environment:
      RABBITMQ_HOST: "rabbitmq"
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: "guest"
      RABBITMQ_PASS: "guest"
    image: ${DOCKER_REGISTRY-}webshopcatalogconsumer
    build:
      context: .
      dockerfile: WebShopCatalogConsumer/Dockerfile
    links:
     - catalog_db
     - rabbitmq


  webshopcatalogapi:
    restart: on-failure
    container_name: 'catalog_api'
    image: ${DOCKER_REGISTRY-}webshopcatalogapi
    build:
      context: .
      dockerfile: WebShopCatalogAPI/Dockerfile
    ports:
      - 8082:80
    links:
     - catalog_db


  webshopcatalogapplication:
    restart: on-failure
    container_name: 'catalog_application'
    image: ${DOCKER_REGISTRY-}webshopcatalogapplication
    build:
      context: .
      dockerfile: WebShopCatalogApplication/Dockerfile
    ports:
      - 8083:80
    links:
     - webshopcatalogapi

#--------------------------------GATEWAYS--------------------------------------

  user_db:
    image: postgres:13.3
    restart: always
    container_name: 'user_db'
    environment:
      POSTGRES_DB: user
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
    ports:
      - 5433:5432
    volumes:
      - ./user_db_backup:/var/lib/postgresql/data

  webshopadmingateway:
    restart: on-failure
    container_name: 'admin_gateway'
    image: ${DOCKER_REGISTRY-}webshopadmingateway
    build:
      context: .
      dockerfile: WebShopAdminGateway/Dockerfile
    ports:
      - 8084:80
    links:
        - webshopadminapi
        - user_db

  webshopcataloggateway:    
    restart: on-failure
    container_name: 'catalog_gateway'
    image: ${DOCKER_REGISTRY-}webshopcataloggateway
    build:
      context: .
      dockerfile: WebShopCatalogGateway/Dockerfile
    ports:
      - 8085:80
    links:
        - webshopcatalogapi
        - user_db

